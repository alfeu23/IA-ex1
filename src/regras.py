def add_rules(env):
    """Define the rules for the env"""

    env.build("""
   (defrule recomendar-curso-engenharia
      (declare (salience 50))
      (perfil
         (preferencia_turno ?turno)
         (nota_enem ?ne)
         (areas_interesse $? ?area $?)
         (locais_interesse $? ?campus $?)
         (duracao_preferencia ?dp)
         (tipo_preferencia ?t))
      (perfil-engenharia
         (foco_preferencia ?foco_desejado))
      (curso
         (nome ?n)
         (campus ?campus)
         (duracao ?d)
         (turno ?turno)
         (tipo ?tipo)
         (area "Engenharias")
         (nota_corte ?nc))
      (curso-engenharia
         (nome ?n)
         (foco ?f))
      (test (<= ?nc ?ne))
      (test (<= ?d ?dp))
      (test (eq ?area "Engenharias"))
      (test (eq ?f ?foco_desejado))
      (test (or (eq ?tipo ?t)
                (neq (str-index ?t ?tipo) FALSE)))
      (not (curso-processado ?n))
      =>
      (printout t "======================================" crlf)
      (printout t "CURSO DE ENGENHARIA ENCONTRADO!" crlf)
      (printout t "======================================" crlf)
      (printout t "Nome: " ?n crlf)
      (printout t "Campus: " ?campus crlf)
      (printout t "Área: Engenharias" crlf)
      (printout t "Duração: " ?d " semestres" crlf)
      (printout t "Turno: " ?turno crlf)
      (printout t "Tipo: " ?tipo crlf)
      (printout t "Nota de Corte: " ?nc crlf)
      (printout t "Sua Nota ENEM: " ?ne crlf)
      (printout t "Foco: " ?f crlf)
      (printout t "======================================" crlf)
      (printout t crlf)
      (assert (curso-processado ?n)))
   """)

    env.build("""
   (defrule recomendar-curso-geral
      (declare (salience 10))
      (perfil
         (preferencia_turno ?turno)
         (nota_enem ?ne)
         (areas_interesse $? ?area $?)
         (locais_interesse $? ?campus $?)
         (duracao_preferencia ?dp)
         (tipo_preferencia ?t))
      (curso
         (nome ?n)
         (campus ?campus)
         (duracao ?d)
         (turno ?turno)
         (tipo ?tipo)
         (area ?area)
         (nota_corte ?nc))
      (test (<= ?nc ?ne))
      (test (<= ?d ?dp))
      (test (or (eq ?tipo ?t)
                (neq (str-index ?t ?tipo) FALSE)))
      (not (curso-processado ?n))
      (test (neq ?area "Engenharias"))
      =>
      (printout t "======================================" crlf)
      (printout t "CURSO ENCONTRADO!" crlf)
      (printout t "======================================" crlf)
      (printout t "Nome: " ?n crlf)
      (printout t "Campus: " ?campus crlf)
      (printout t "Área: " ?area crlf)
      (printout t "Duração: " ?d " semestres" crlf)
      (printout t "Turno: " ?turno crlf)
      (printout t "Tipo: " ?tipo crlf)
      (printout t "Nota de Corte: " ?nc crlf)
      (printout t "Sua Nota ENEM: " ?ne crlf)
      (printout t "======================================" crlf)
      (printout t crlf)
      (assert (curso-processado ?n)))
   """)
